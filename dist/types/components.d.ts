/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from './stencil.core';


export namespace Components {
  interface CrdsModal {
    'isActive': boolean;
    'onClose': Function;
    'title': string;
  }
  interface CrdsSubscribe {
    'src': string;
    'title': string;
  }
  interface GiveNav {
    'data': JSON;
    'giveNavIsShowing': boolean;
  }
  interface GlobalNav {
    'config': Object;
    'env': string;
    'giveData': JSON;
    'giveNavIsShowing': boolean;
    'href': string;
    'mainNavIsShowing': boolean;
    'navClickHandler': Function;
    'profileData': JSON;
    'profileNavIsShowing': boolean;
  }
  interface HeartButton {
    /**
    * Total number of hearts
    */
    'count': number;
    /**
    * Unique identifier for likeable resource
    */
    'id': string;
    /**
    * Boolean indicating whether likeable resource has been liked
    */
    'isLiked': boolean;
    /**
    * Cache key for localStorage
    */
    'key': string;
  }
  interface NavCtas {
    'active': string;
    'data': string;
    'href': string;
  }
  interface NavSection {
    'activeSection': any;
    'id': string;
    'isActive': boolean;
    'onActivate': any;
  }
  interface NavSectionSubnav {
    'active': string;
    'id': string;
    'onBack': Function;
  }
  interface ProfileNav {
    'config': any;
    'currentUser': any;
    'data': JSON;
    'onSignOut': Function;
    'profileNavIsShowing': boolean;
  }
  interface SharedFooter {
    'env': string;
    'src': string;
  }
  interface SharedHeader {
    'env': string;
    'src': string;
  }
  interface SnailTrail {
    'env': string;
    'name': string;
    'src': string;
  }
  interface SnailTrailLink {
    'automationId': string;
    'href': string;
    'isActive': boolean;
  }
}

declare global {


  interface HTMLCrdsModalElement extends Components.CrdsModal, HTMLStencilElement {}
  var HTMLCrdsModalElement: {
    prototype: HTMLCrdsModalElement;
    new (): HTMLCrdsModalElement;
  };

  interface HTMLCrdsSubscribeElement extends Components.CrdsSubscribe, HTMLStencilElement {}
  var HTMLCrdsSubscribeElement: {
    prototype: HTMLCrdsSubscribeElement;
    new (): HTMLCrdsSubscribeElement;
  };

  interface HTMLGiveNavElement extends Components.GiveNav, HTMLStencilElement {}
  var HTMLGiveNavElement: {
    prototype: HTMLGiveNavElement;
    new (): HTMLGiveNavElement;
  };

  interface HTMLGlobalNavElement extends Components.GlobalNav, HTMLStencilElement {}
  var HTMLGlobalNavElement: {
    prototype: HTMLGlobalNavElement;
    new (): HTMLGlobalNavElement;
  };

  interface HTMLHeartButtonElement extends Components.HeartButton, HTMLStencilElement {}
  var HTMLHeartButtonElement: {
    prototype: HTMLHeartButtonElement;
    new (): HTMLHeartButtonElement;
  };

  interface HTMLNavCtasElement extends Components.NavCtas, HTMLStencilElement {}
  var HTMLNavCtasElement: {
    prototype: HTMLNavCtasElement;
    new (): HTMLNavCtasElement;
  };

  interface HTMLNavSectionElement extends Components.NavSection, HTMLStencilElement {}
  var HTMLNavSectionElement: {
    prototype: HTMLNavSectionElement;
    new (): HTMLNavSectionElement;
  };

  interface HTMLNavSectionSubnavElement extends Components.NavSectionSubnav, HTMLStencilElement {}
  var HTMLNavSectionSubnavElement: {
    prototype: HTMLNavSectionSubnavElement;
    new (): HTMLNavSectionSubnavElement;
  };

  interface HTMLProfileNavElement extends Components.ProfileNav, HTMLStencilElement {}
  var HTMLProfileNavElement: {
    prototype: HTMLProfileNavElement;
    new (): HTMLProfileNavElement;
  };

  interface HTMLSharedFooterElement extends Components.SharedFooter, HTMLStencilElement {}
  var HTMLSharedFooterElement: {
    prototype: HTMLSharedFooterElement;
    new (): HTMLSharedFooterElement;
  };

  interface HTMLSharedHeaderElement extends Components.SharedHeader, HTMLStencilElement {}
  var HTMLSharedHeaderElement: {
    prototype: HTMLSharedHeaderElement;
    new (): HTMLSharedHeaderElement;
  };

  interface HTMLSnailTrailElement extends Components.SnailTrail, HTMLStencilElement {}
  var HTMLSnailTrailElement: {
    prototype: HTMLSnailTrailElement;
    new (): HTMLSnailTrailElement;
  };

  interface HTMLSnailTrailLinkElement extends Components.SnailTrailLink, HTMLStencilElement {}
  var HTMLSnailTrailLinkElement: {
    prototype: HTMLSnailTrailLinkElement;
    new (): HTMLSnailTrailLinkElement;
  };
  interface HTMLElementTagNameMap {
    'crds-modal': HTMLCrdsModalElement;
    'crds-subscribe': HTMLCrdsSubscribeElement;
    'give-nav': HTMLGiveNavElement;
    'global-nav': HTMLGlobalNavElement;
    'heart-button': HTMLHeartButtonElement;
    'nav-ctas': HTMLNavCtasElement;
    'nav-section': HTMLNavSectionElement;
    'nav-section-subnav': HTMLNavSectionSubnavElement;
    'profile-nav': HTMLProfileNavElement;
    'shared-footer': HTMLSharedFooterElement;
    'shared-header': HTMLSharedHeaderElement;
    'snail-trail': HTMLSnailTrailElement;
    'snail-trail-link': HTMLSnailTrailLinkElement;
  }
}

declare namespace LocalJSX {
  interface CrdsModal extends JSXBase.HTMLAttributes<HTMLCrdsModalElement> {
    'isActive'?: boolean;
    'onClose'?: Function;
    'title'?: string;
  }
  interface CrdsSubscribe extends JSXBase.HTMLAttributes<HTMLCrdsSubscribeElement> {
    'src'?: string;
    'title'?: string;
  }
  interface GiveNav extends JSXBase.HTMLAttributes<HTMLGiveNavElement> {
    'data'?: JSON;
    'giveNavIsShowing'?: boolean;
  }
  interface GlobalNav extends JSXBase.HTMLAttributes<HTMLGlobalNavElement> {
    'config'?: Object;
    'env'?: string;
    'giveData'?: JSON;
    'giveNavIsShowing'?: boolean;
    'href'?: string;
    'mainNavIsShowing'?: boolean;
    'navClickHandler'?: Function;
    'profileData'?: JSON;
    'profileNavIsShowing'?: boolean;
  }
  interface HeartButton extends JSXBase.HTMLAttributes<HTMLHeartButtonElement> {
    /**
    * Total number of hearts
    */
    'count'?: number;
    /**
    * Unique identifier for likeable resource
    */
    'id'?: string;
    /**
    * Boolean indicating whether likeable resource has been liked
    */
    'isLiked'?: boolean;
    /**
    * Cache key for localStorage
    */
    'key'?: string;
  }
  interface NavCtas extends JSXBase.HTMLAttributes<HTMLNavCtasElement> {
    'active'?: string;
    'data'?: string;
    'href'?: string;
  }
  interface NavSection extends JSXBase.HTMLAttributes<HTMLNavSectionElement> {
    'activeSection'?: any;
    'id'?: string;
    'isActive'?: boolean;
    'onActivate'?: any;
  }
  interface NavSectionSubnav extends JSXBase.HTMLAttributes<HTMLNavSectionSubnavElement> {
    'active'?: string;
    'id'?: string;
    'onBack'?: Function;
  }
  interface ProfileNav extends JSXBase.HTMLAttributes<HTMLProfileNavElement> {
    'config'?: any;
    'currentUser'?: any;
    'data'?: JSON;
    'onSignOut'?: Function;
    'profileNavIsShowing'?: boolean;
  }
  interface SharedFooter extends JSXBase.HTMLAttributes<HTMLSharedFooterElement> {
    'env'?: string;
    'src'?: string;
  }
  interface SharedHeader extends JSXBase.HTMLAttributes<HTMLSharedHeaderElement> {
    'env'?: string;
    'src'?: string;
  }
  interface SnailTrail extends JSXBase.HTMLAttributes<HTMLSnailTrailElement> {
    'env'?: string;
    'name'?: string;
    'src'?: string;
  }
  interface SnailTrailLink extends JSXBase.HTMLAttributes<HTMLSnailTrailLinkElement> {
    'automationId'?: string;
    'href'?: string;
    'isActive'?: boolean;
  }

  interface IntrinsicElements {
    'crds-modal': CrdsModal;
    'crds-subscribe': CrdsSubscribe;
    'give-nav': GiveNav;
    'global-nav': GlobalNav;
    'heart-button': HeartButton;
    'nav-ctas': NavCtas;
    'nav-section': NavSection;
    'nav-section-subnav': NavSectionSubnav;
    'profile-nav': ProfileNav;
    'shared-footer': SharedFooter;
    'shared-header': SharedHeader;
    'snail-trail': SnailTrail;
    'snail-trail-link': SnailTrailLink;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


